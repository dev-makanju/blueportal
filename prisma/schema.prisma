generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum ContributionStatus {
  PENDING
  APPROVED
  REJECTED
}

enum Role {
  STUDENT
  LECTURER
}

model User {
  id             String               @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?              @unique
  emailVerified  DateTime?
  image          String?
  role           Role
  password       String 
  assignments    Assignment[]         @relation("UserAssignments")
  projects       Project[]            @relation("UserProjects")
  lessonPlans    LessonPlan[]         @relation("UserLessonPlans")
  activities     Activity[]           @relation("UserActivities")
  contributions  ProjectContributor[] @relation("UserContributions")
  ratings        ProjectRating[]      @relation("UserRatings")
  comments       ProjectComment[]     @relation("UserComments")
}

model Assignment {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String
  subject       String
  dueDate       String
  gradeLevel    String
  instructions  String
  resources     String?
  userId        String   @db.ObjectId
  user          User     @relation("UserAssignments", fields: [userId], references: [id], onDelete: Cascade)
}

model Project {
  id             String               @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  description    String?
  dueDate        String
  userId         String               @db.ObjectId
  user           User                 @relation("UserProjects", fields: [userId], references: [id], onDelete: Cascade)
  content        String?
  original       String?
  ratings        ProjectRating[]
  contributors   ProjectContributor[] @relation("ProjectContributions")
  tags           String
  comments       ProjectComment[]     @relation("ProjectComments")
  fileUrl        String?
  gradeLevel     String
  objective      String?
  curriculum     String? 
}


model ProjectRating {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  projectId     String    @db.ObjectId
  userId        String    @db.ObjectId
  user          User      @relation("UserRatings", fields: [userId], references: [id], onDelete: Cascade)
  project       Project   @relation(fields: [projectId], references: [id], onDelete: Cascade) 
  rating        Int
}

model LessonPlan {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  gradeLevel    String
  objectives    String
  materials     String
  lessonPhases  Json      // JSON to hold structured lesson phases with intro, main activity, practice, conclusion
  assessment    String
  reflection    String?
  date          DateTime
  userId        String   @db.ObjectId
  user          User     @relation("UserLessonPlans", fields: [userId], references: [id], onDelete: Cascade)
}

model ProjectContributor {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  projectId String   @db.ObjectId
  userId    String   @db.ObjectId 
  project   Project  @relation("ProjectContributions", fields: [projectId], references: [id], onDelete: Cascade)
  user      User     @relation("UserContributions", fields: [userId], references: [id], onDelete: Cascade)
  status    ContributionStatus @default(PENDING)
  createdAt DateTime @default(now())
}

model Activity {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  description   String
  date          DateTime
  userId        String   @db.ObjectId
  user          User     @relation("UserActivities", fields: [userId], references: [id], onDelete: Cascade)
}

model ProjectComment {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  projectId     String    @db.ObjectId
  userId        String    @db.ObjectId
  user          User      @relation("UserComments", fields: [userId], references: [id], onDelete: Cascade)
  project       Project   @relation("ProjectComments", fields: [projectId], references: [id], onDelete: Cascade)
  content       String   
  createdAt     DateTime  @default(now())
}

model ProjectDownLoad {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  projectId     String    @db.ObjectId
  userId        String    @db.ObjectId
  createdAt     DateTime  @default(now())
}
